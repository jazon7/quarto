---
title: "How to Make Publication-Ready Tables in R Using gtsummary"
author: "Jason Gavrilis"
editor: source
execute: 
  echo: true
  output: true
  warning: false
format:
  html:
    theme: litera
    toc: true
    toc-location: left
    number-sections: false
    number-depth: 2
    code-fold: show
    fig-align: center
    fig-height: 7
    fig-width: 9
    highlight-style: espresso
    embed-resources: true
bibliography: references.bib
---

Here is how you can create a presentation-ready table in R with the `gtsummary` package.

## Prerequisites

Key R functions and packages:

-   `tbl_summary()` to make summary tables. Requires the `gtsummary` package.

-   `as_flex_table()` to convert the summary tables. Requires the `flextable` package.

-   The `officer` package to help embed the tables into Microsoft Word and Powerpoint.

-   The `webshot` package to render tables as graphic files (e.g. png).

-   The `tidyverse` package for data manipulation and piping.

-   The `labelled` package for adding labels to variables.

-   The `medicaldata` package for the data.

Load required packages:

```{r warning=FALSE, echo=TRUE}
library(pacman)
pacman::p_load(tidyverse, medicaldata, officer, gtsummary, webshot, flextable, labelled)
```

## Create a Publication-Ready Summary Table

### Streptomycin for Tuberculosis

Import the `strep_tb` data set from the `medicaldata` package as a data frame called `strep`:

```{r echo=TRUE}
strep <- medicaldata::strep_tb
head(strep)
```

Clean up the `strep` data set and add variable labels[^1] to each variable with the `val_labels()` function:

[^1]: Labeling variables is not essential, but will save time and effort when making summary tables. Without variable labels, `gtsummary` will use the column names for naming the variables in the table. You would then have to manually rename all variables.

```{r echo=TRUE}
#recode all values beggingin with 1_ to 6_ 
for (i in 1:6){
  pat <- paste0(i,"_")
  strep[] <- lapply(strep, gsub, pattern=pat, replacement='')
}
rm(i, pat)

#convert variables to factors or numeric
strep <- strep %>% 
  mutate_if(., is.character, as_factor) %>% 
  mutate(improved = as.logical(improved)) %>% 
  mutate(rad_num = as.numeric(rad_num)) %>% 
  mutate(improvement = ifelse(improved == TRUE, 1, 0))


strep_labels <- c(patient_id = "Patient ID",
            arm = "Study Arm",
            dose_strep_g = "Dose of Streptomycin (Grams)",
            does_PAS_g = "Dose of Para-Amino-Salicylate (Grams)",
            gender = "Gender",
            baseline_condition = "Baseline Condition",
            baseline_temp = "Baseline Temperature (F)",
            baseline_esr = "Baseline Erythrocyte Sedimentation Rate (mmph)",
            baseline_cavitation = "Baseline Cavitation of the Lungs on chest X-ray",
            strep_resistance = "Resistance to Streptomycin at 6 months",
            radiologic_6m = "Radiologic outcome at 6 months",
            radnum = "Numeric Rating of Chest X-ray at 6 months",
            improved = "Improvement at 6 months?",
            improvement = "Improvement at 6 months?")

# Assign labels to data frame variables
strep <- set_variable_labels(strep,         
                             .labels = strep_labels) %>% 
  select(- improved)
```

Now pass the `strep` data frame - minus the patient_id column - to the `tbl_summary()`[^2] function:

[^2]: First set gtsummary theme to the journal 'jama' and 'compact'. Also set the default print engine to 'flextable'. These are my go-to settings for optimal looking tables.

```{r echo=TRUE}
#Setting theme
theme_gtsummary_journal(journal = 'jama')
#Setting theme `Compact`
theme_gtsummary_compact()
#Setting theme `printer to flextable
theme_gtsummary_printer(print_engine = c("flextable"),set_theme = TRUE)
strep_tbl <-
  gtsummary::tbl_summary(strep %>% 
                           select(-patient_id))
strep_tbl
```

With only minimal tinkering the `tbl_summary()` function has created a very nice looking summary table of the `strep` data!

## Create an Advanced Publication-Ready Summary Table

The strep data is based on one of the first modern randomised control trials which was published in the BMJ [@streptom1948].

Thus, let's print the `strep` patient data separated into the two study arms:

```{r}
strep_tbl <-
  gtsummary::tbl_summary(
    strep %>% select(-patient_id, -dose_PAS_g, -dose_strep_g, -rad_num),
    by = arm,
     missing = "no") %>% 
  add_overall() %>% #add overall column 
  add_p() %>% # test for a difference between groups
  modify_header(label = "**Patient Characteristics**") %>% # update the column header
  bold_labels() 
strep_tbl
```

Or, with the `tbl_strata()` function let's print the patient outcomes by study arm and baseline condition:

```{r}
strep %>%
  select(arm, baseline_condition, improvement, radiologic_6m) %>%
  tbl_strata(
    strata = baseline_condition,
    ~ .x %>%
      tbl_summary(by = arm, missing = "no") %>%
            modify_header(all_stat_cols() ~ "**{level}**, N = {n} ({style_percent(p)}%)") %>% 
       modify_header(label = "**Patient Outcomes**") %>% 
      modify_caption("**Outcome by Baseline Condition and Study Arm**") 
  )
```

We can even print a beautiful summary of a regression model[^3] with the `tbl_regression` function:

[^3]: Here I'm showing a regression model predicting if the patient improved by study arm (control vs. streptomycin) and gender. Note, this article is aimed at showing how to print tables, not how to perform correct statistical analysis.

```{r warning=FALSE}
model <- glm(improvement ~ arm + gender, strep, family = binomial)
tbl <- tbl_regression(model, exponentiate = TRUE)
tbl
```

# Exporting tables

With help of the `as_flex_table()` function, first convert the table to a flextable and then export using one of the following options:

### 1. Export As Image

Use the `save_as_image()` function to export in .png format:

```{r echo=TRUE, eval=TRUE, output = FALSE}
if(!file.exists("output/strep")){
  dir.create(file.path("output/strep"), recursive = TRUE)
}
#convert to flextable
strep_tbl_flx <- strep_tbl %>% 
  as_flex_table()
#save as png
save_as_image(strep_tbl_flx, path = "output/strep/strep_tbl_simple.png", 
              zoom = 4, 
              expand = 5)
```

### 2. Export to Microsoft Word

Use the `save_as_docx()` function to export the table embedded in a Word document:

```{r echo=TRUE, eval=TRUE, output = FALSE}
save_as_docx(
  `Strep` = strep_tbl_flx,
  path = "output/strep/strep_tbl_simple.docx", 
  pr_section = prop_section(
  page_size = page_size(
    orient = "portrait",
    width = 12, height = 8
  ),
  type = "continuous",
  page_margins = page_mar()
)
)
```

### 3. Export to Microsoft Powerpoint

Use the `save_as_pptx()` function to export the table embedded into Powerpoint:

```{r echo=TRUE, eval=TRUE, output = FALSE}
save_as_pptx(`Strep` = strep_tbl_flx, 
               path = "output/strep/strep_table_simple.pptx")
```

# Resources

`flextable` Package [@flextable]

`gtsummary` Package [@gtsummary]

`tidyverse` Package [@tidyverse]

`labelled` Package [@labelled]

`officer` Package [@officer]

`medicaldata` [@medicaldata]
